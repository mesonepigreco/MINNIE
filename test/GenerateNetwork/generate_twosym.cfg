/*
 * In this very simple file we generate a testing AtomicNetwork
 * for a pure Hydrogen ensemble.
 * We use only two G2 symmetry function for the input, 
 * but 1 node as input layer. 
 * This node is obtained as the best linear combination of G2 that 
 * better separates the energy and forces of the given ensemble (PCA).
 * To do so, you must just specify a lower number of input layer than output.
 *
 * To run this example and generate the NeuralNetwork, use:
 * 
 * >>> ../../bin/test_nn_prediction.exe generate_twosym.cfg
 *
 * It will create the network as TwoNodeNetwork_XXX.cfg
 *
 * where XXX are a set of files containing the info about the PCA, 
 * the symmetric functions and the network structure and parameters.
 *
 *
 * You can then test if the network correctly computes energy and forces
 * by running:
 *
 * >>> ../../bin/test_nn_prediction.exe test_twosym.cfg
 *
 * Please, refer to the comments on the test_twosym.cfg file for more details.
 */



// We want to generate a new Atomic NN
mode = "generate"; // The other mode is 'test'

/*
 * Here we setup a bit of info about the Network
 * n_lim is the number of input layer in the atomic network
 * n_hidden is the number of hidden layers in the fully connected network
 * nodes_per_layer is the number of nodes for each hidden layer
 * save_prefix is the output PREFIX for the network to be saved.
 */
n_lim = 3
n_hidden = 0
nodes_per_layer = 1
save_prefix = "G4Network"


// The supercell size (for the periodic boundary conditions)
N_sup_x = 3
N_sup_y = 3
N_sup_z = 3

// Define the ensemble of configurations
Ensemble :
{
	// Where is the ensemble?
	data_dir = "../ReadEnsemble/ensemble_with_forces";
	// How many configuration should I read?
	n_configs = 20;
	// How many atoms there are in each configuration?
	n_atoms = 24;
	// This is an ID that uniquely identifies the esemble in the data_dir
	population = 1;
	// The unit of measurement used (in Angstrom) to specify the coordinates
	alat = 2.93213980942;
}

// Define the symmetric functions for the neural networks
SymmetricFunctions :
{
	// How many two-body functions?
	n_g2 = 0
	// How many four-body functions?
	n_g4 = 3
	// The ETA, RS parameters for each G2 function
	g2_eta = [ ]
	g2_Rs = []
	// The ETA, ZETA, LANBDA parameters for each G4 function
	g4_eta = [ 1., 0.5, 0.2 ];
	g4_zeta = [ 1., 1., 0.5 ];
	g4_lambda = [ 1, 1, -1 ];
	// What is the cutoff radious? 
	cutoff_radius = 6.;
	// What kind of cutoff function do you want? (0 or 1)
	cutoff_type = 0;
}
