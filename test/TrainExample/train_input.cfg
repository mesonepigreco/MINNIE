/*
 * This simple example setup all the info
 * to train an atomic neural network on the specefied ensemble.
 */


AtomicNetwork :
{
	// Generate a novel network
	mode = "generate";

	// Setup the number of nodes in the first layer
	n_lim = 8;

	// The number of hidden layers:
	n_hidden = 2;

	// How many nodes in each hidden layer?
	nodes_per_layer = 8;
}

// Setup the symmetric functions for the input layer
SymmetricFunctions : 
{
	// How many g2 functions (radial functions)
	n_g2 = 8;

	// How many g4 functions (angular functions)
	n_g4 = 2;

	// The value of the eta parameter
	// The bigger, the closer the function will probe to the Rs
	g2_eta = [1.0, 1.4, 1.8, 2.2, 2.6, 3.0, 3.4, 3.6];
	// The central value of the G2 function
	g2_Rs = [0.,0., 0., 0., 0., 0., 0., 0.];

	// The parameters for the g4 function
	g4_eta = [1., 5.];
	g4_zeta = [1., 2.];
	g4_lambda = [1, -1];

	// The distance over which two atoms are no more able to fill themselves
	cutoff_radius = 6.;
	cutoff_type = 0;
}


Trainer :
{
	// The training algorithm
	// "sd" = Steepest Descent (Back-propagation)
	// "mc" = Simulated annealing
	method = "sd"; 

	// The single step of a random move
	step = 2.;

	// How many iteration 
	max_iterations = 100;

	// Where to save the output
	output_prefix = "trial_network";
}

Ensemble :
{
	// Where is located the ensemble
	data_dir = "../ReadEnsemble/new_ensemble";

	// How many configurations
	n_configs = 100;

	// How many atoms in each configuration
	n_atoms = 40;

	// The population ID (to distinguish several ensemble
	// in the same directory).
	population = 1;

	// The unit for the atomic conversion
	alat = 1; //2.93213980942;
}

// The supercell for periodic boundary conditions
N_sup_x = 3;
N_sup_y = 3;
N_sup_z = 3;

